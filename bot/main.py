import logging
import asyncio
from aiogram import Bot, Dispatcher
from bot.commands import set_commands
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
from bot.config import TELEGRAM_API_TOKEN
from bot.handlers import router
from bot.database import init_db

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)

logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
bot_properties = DefaultBotProperties(parse_mode="HTML")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def create_bot_and_dispatcher() -> tuple[Bot, Dispatcher]:
    bot = Bot(token=TELEGRAM_API_TOKEN, default=bot_properties)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    return bot, dp

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    bot, dp = create_bot_and_dispatcher()
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.delete_webhook(drop_pending_updates=True)
        await set_commands(bot)

        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        await dp.start_polling(bot)

    except Exception as e:
        logger.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: %s", e)

    finally:
        logger.info("üîí –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞.")
        await dp.storage.close()
        if hasattr(dp.storage, "wait_closed"):
            await dp.storage.wait_closed()
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

# –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
