import aiohttp
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from aiogram import Bot
from bot.config import TMDB_API_KEY

logger = logging.getLogger(__name__)

GENRES = {
    "–ë–æ–µ–≤–∏–∫ üé¨": 28, "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è üèùÔ∏è": 12, "–ê–Ω–∏–º–∞—Ü–∏—è üé®": 16, "–ö–æ–º–µ–¥–∏—è üòÇ": 35,
    "–ö—Ä–∏–º–∏–Ω–∞–ª üöî": 80, "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π üé•": 99, "–î—Ä–∞–º–∞ üé≠": 18, "–§—ç–Ω—Ç–µ–∑–∏ üßô‚Äç‚ôÇÔ∏è": 14,
    "–£–∂–∞—Å—ã üëª": 27, "–î–µ—Ç–µ–∫—Ç–∏–≤ üîç": 9648, "–ú–µ–ª–æ–¥—Ä–∞–º–∞ üíï": 10749, "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ üöÄ": 878,
    "–¢—Ä–∏–ª–ª–µ—Ä üò±": 53, "–í–µ—Å—Ç–µ—Ä–Ω ü§†": 37
}

BASE_URL = "https://api.themoviedb.org/3"


def base_params() -> dict:
    """–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ TMDB API."""
    return {
        "api_key": TMDB_API_KEY,
        "language": "ru-RU"
    }


async def fetch(session: aiohttp.ClientSession, url: str, params: dict) -> dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP GET-–∑–∞–ø—Ä–æ—Å –∫ TMDB API."""
    try:
        async with session.get(url, params=params) as response:
            if response.status != 200:
                error_msg = f"TMDB API error: {response.status} - {await response.text()}"
                logger.error(error_msg)
                return {"error": error_msg}
            return await response.json()
    except aiohttp.ClientError as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ TMDB: {e}")
        return {"error": str(e)}


async def fetch_movies_by_genre(session: aiohttp.ClientSession, genre_name: str, page: int = 1) -> dict:
    genre_id = GENRES.get(genre_name)
    if genre_id is None:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∂–∞–Ω—Ä."}

    url = f"{BASE_URL}/discover/movie"
    params = {
        **base_params(),
        "with_genres": genre_id,
        "sort_by": "popularity.desc",
        "primary_release_date.gte": f"{datetime.now().year - 10}-01-01",
        "page": page
    }
    return await fetch(session, url, params)


async def fetch_top_movies(session: aiohttp.ClientSession, page: int = 1) -> dict:
    url = f"{BASE_URL}/movie/top_rated"
    params = {
        **base_params(),
        "page": page
    }
    return await fetch(session, url, params)


async def fetch_recommendations(session: aiohttp.ClientSession) -> dict:
    url = f"{BASE_URL}/trending/movie/week"
    params = base_params()
    return await fetch(session, url, params)


async def fetch_new_movies(session: aiohttp.ClientSession, page: int = 1) -> dict:
    url = f"{BASE_URL}/movie/now_playing"
    params = {
        **base_params(),
        "page": page
    }
    return await fetch(session, url, params)


async def search_movies_by_keyword(session: aiohttp.ClientSession, query: str, page: int = 1) -> dict:
    url = f"{BASE_URL}/search/movie"
    params = {
        **base_params(),
        "query": query,
        "page": page,
        "include_adult": "false"
    }
    return await fetch(session, url, params)

async def send_movie_preview(bot: Bot, chat_id: int, movie: dict):
    movie_id = movie.get("id")
    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    release = movie.get("release_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:4]
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    poster_path = movie.get("poster_path")

    caption = f"<b>{title}</b> ({release})\n{overview[:300]}..."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_id}")
    ]])

    if poster_path:
        poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
        await bot.send_photo(chat_id, photo=poster_url, caption=caption, parse_mode="HTML", reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, text=caption, parse_mode="HTML", reply_markup=keyboard)