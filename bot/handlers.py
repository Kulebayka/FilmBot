from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from bot.api_tmdb import GENRES, fetch_movies_by_genre, fetch_top_movies, fetch_recommendations, fetch_new_movies, search_movies_by_keyword, send_movie_preview
from bot.database.db import async_session
from bot.database.models import User
from sqlalchemy import select
from aiohttp import ClientSession
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from time import time
from bot.config import TMDB_API_KEY
from bot.database.crud import get_or_create_user_with_favorites, add_favorite, get_favorites, remove_favorite, get_user_by_id
import aiohttp
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)

logger = logging.getLogger(__name__)

user_cooldowns = {}
router = Router()
user_data = {}

class SearchState(StatesGroup):
    waiting_for_query = State()

def genre_keyboard():
    buttons = [KeyboardButton(text=genre) for genre in GENRES]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])
    keyboard.keyboard.append([KeyboardButton(text="üî• –¢–æ–ø-3"), KeyboardButton(text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"), KeyboardButton(text="üÜï –ù–æ–≤–∏–Ω–∫–∏")])
    keyboard.keyboard.append([KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")])
    return keyboard

def back_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞")]])

def more_movies_keyboard(genre):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë üé•", callback_data=f"more_{genre}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def notification_keyboard(enabled: bool) -> InlineKeyboardMarkup:
    text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=text, callback_data="toggle_notifications")]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∂–∞–Ω—Ä–∞–º–∏
@router.message(Command("start"))
async def start(message: types.Message):
    user_data[message.chat.id] = {"genre": None, "page": 1}

    async with async_session() as session:
        result = await session.execute(
            select(User).filter_by(telegram_id=message.from_user.id)
        )
        db_user = result.scalar_one_or_none()

        if not db_user:
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
            session.add(new_user)
            await session.commit()

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ üëá", reply_markup=genre_keyboard())

@router.message(Command("search"))
async def search_command(message: Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchState.waiting_for_query)

@router.message(SearchState.waiting_for_query)
async def handle_search_query(message: Message, state: FSMContext):
    query = message.text.strip()
    await state.clear()  # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    await state.update_data(query=query)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ FSM

    async with ClientSession() as session:
        data = await search_movies_by_keyword(session, query, page=1)

    if "error" in data:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    results = data.get("results", [])
    if not results:
        await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for movie in results[:5]:
        await send_movie_preview(message.bot, message.chat.id, movie)

    more_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data="search_more|2")
    ]])
    await message.answer("–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=more_keyboard)

@router.callback_query(F.data.startswith("search_more|"))
async def handle_search_more_callback(callback: CallbackQuery, state: FSMContext):
    try:
        _, raw_page = callback.data.split("|")
        page = int(raw_page)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data: {callback.data} ‚Äî {e}")
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    user_data = await state.get_data()
    query = user_data.get("query")

    if not query:
        await callback.message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    try:
        async with ClientSession() as session:
            data = await search_movies_by_keyword(session, query, page=page)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∏–ª—å–º–æ–≤: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    results = data.get("results", [])
    if not results:
        await callback.message.answer("–ë–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for movie in results[:5]:
        await send_movie_preview(callback.bot, callback.message.chat.id, movie)

    next_page = page + 1
    more_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data=f"search_more|{next_page}")
    ]])
    await callback.message.answer("–ï—â—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", reply_markup=more_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞" ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –∂–∞–Ω—Ä–∞–º
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞")
async def go_back(message: types.Message):
    user_data[message.chat.id] = {"genre": None, "page": 1}
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Å–Ω–æ–≤–∞ üëá", reply_markup=genre_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ "–¢–æ–ø-3", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ù–æ–≤–∏–Ω–∫–∏", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
@router.message(lambda message: not (message.text and message.text.startswith('/')))
async def handle_genre_selection(message: types.Message, bot: Bot):
    genre_name = message.text
    if genre_name in GENRES:
        user_data[message.chat.id] = {"genre": genre_name, "page": 1}
        await send_movies(bot, message.chat.id, genre_name, 1)
    elif genre_name == "üî• –¢–æ–ø-3":
        await send_top_movies(bot, message.chat.id)
    elif genre_name == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        await send_recommendations(bot, message.chat.id)
    elif genre_name == "üÜï –ù–æ–≤–∏–Ω–∫–∏":
        await send_new_movies(bot, message.chat.id)
    elif genre_name == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await show_favorites(message)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚¨á", reply_markup=genre_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞
@router.callback_query(lambda call: call.data == "back")
async def back_to_genres(call: types.CallbackQuery):
    user_data[call.message.chat.id] = {"genre": None, "page": 1}
    await call.message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Å–Ω–æ–≤–∞ üëá", reply_markup=genre_keyboard())
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë" ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–æ–≤
@router.callback_query(lambda call: call.data.startswith("more_"))
async def more_movies(call: types.CallbackQuery, bot: Bot):
    genre_name = call.data.split("_", 1)[1]
    user_data[call.message.chat.id]["page"] += 1
    page = user_data[call.message.chat.id]["page"]
    await send_movies(bot, call.message.chat.id, genre_name, page)
    await call.message.edit_reply_markup(reply_markup=None) # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
    await call.answer()

async def get_movie_details(movie_id: int):
    url = f'https://api.themoviedb.org/3/movie/{movie_id}'
    params = {
        'api_key': TMDB_API_KEY,
        'language': 'ru'
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            return data

@router.callback_query(lambda call: call.data.startswith("remove_fav_"))
async def remove_from_favorites(call: types.CallbackQuery, bot: Bot):
    movie_id = int(call.data.split("_")[2])
    chat_id = call.message.chat.id

    async with async_session() as session:
        user = await get_or_create_user_with_favorites(session, chat_id, "")
        favorites = await get_favorites(session, user)

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        favorite_movie = next((f for f in favorites if f.movie_id == movie_id), None)

        if favorite_movie:
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            session.delete(favorite_movie)
            await session.commit()
            await call.message.answer(f"‚úÖ –§–∏–ª—å–º '{favorite_movie.movie_title}' —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            await send_favorites(bot, chat_id)
        else:
            await call.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.")

    await call.answer()

@router.callback_query(lambda call: call.data.startswith("del_"))
async def delete_from_favorites(call: types.CallbackQuery):
    movie_id = int(call.data.split("_")[1])
    chat_id = call.message.chat.id

    async with async_session() as session:
        user = await get_or_create_user_with_favorites(session, chat_id, call.from_user.username)
        success = await remove_favorite(session, user, movie_id)

    if success:
        await call.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å–º–æ–º
        await call.answer("üóë –§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    else:
        await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É
async def send_movies(bot, chat_id, genre_name, page):
    async with ClientSession() as session:
        data = await fetch_movies_by_genre(session, genre_name, page)

    results = data.get("results")
    if not results:
        await bot.send_message(chat_id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî")
        return

    last_movie_id = None
    for movie in results[:3]:
        title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        release = movie.get("release_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:4]
        desc = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        text = f"üé¨ *{title} ({release})*\n\n{desc}"

        poster_path = movie.get("poster_path")
        poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None
        poster_data = poster_path or "no_image"

        inline_button = InlineKeyboardButton(
            text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f"fav_{movie['id']}_{poster_data}"
        )
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button]])

        if poster_url:
            await bot.send_photo(chat_id, poster_url, caption=text, parse_mode="Markdown", reply_markup=inline_keyboard)
        else:
            await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=inline_keyboard)

        last_movie_id = movie["id"]

    if last_movie_id:
        await bot.send_message(
            chat_id,
            "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ü–æ—Å–º–æ—Ç—Ä–∏ –µ—â—ë —Ñ–∏–ª—å–º—ã üëá",
            reply_markup=more_movies_keyboard(genre_name)
        )

@router.callback_query(F.data.startswith("more_"))
async def show_more_movies(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    now = time()
    cooldown_seconds = 15

    last_time = user_cooldowns.get(user_id, 0)
    if now - last_time < cooldown_seconds:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.", show_alert=False)
        return

    user_cooldowns[user_id] = now

    genre_name = callback.data.split("_", 1)[1]
    user_data[user_id]["page"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = user_data[user_id]["page"]

    await send_movies(bot, callback.message.chat.id, genre_name, page)
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤
async def send_new_movies(bot: Bot, chat_id: int):
    async with ClientSession() as session:
        data = await fetch_new_movies(session)
        results = data.get("results")
        if not results:
            await bot.send_message(chat_id, "–ù–æ–≤–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî", reply_markup=genre_keyboard())
            return

        for movie in data["results"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–∏–Ω–æ–∫
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            release = movie.get("release_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:4]
            overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            poster_path = movie.get("poster_path")
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            caption = f"üé¨ *{title} ({release})*\n\n{overview}"

            inline_button = InlineKeyboardButton(
                text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"fav_{movie['id']}_{poster_path or 'no_image'}"
            )
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button]])

            if poster_url:
                await bot.send_photo(
                    chat_id, poster_url, caption=caption,
                    parse_mode="Markdown", reply_markup=inline_keyboard
                )
            else:
                await bot.send_message(
                    chat_id, caption, parse_mode="Markdown",
                    reply_markup=inline_keyboard
                )

        await bot.send_message(chat_id, "–≠—Ç–æ –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ! üÜï", reply_markup=genre_keyboard())

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø-3 —Ñ–∏–ª—å–º–æ–≤
async def send_top_movies(bot, chat_id):
    async with ClientSession() as session:
        data = await fetch_top_movies(session)
        results = data.get("results")
        if not results:
            await bot.send_message(chat_id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî")
            return

        for movie in data["results"][:3]:
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            release = movie.get("release_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:4]
            desc = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            text = f"üé¨ *{title} ({release})*\n\n{desc}"

            # –ü–æ—Å—Ç–µ—Ä –∏ –∫–Ω–æ–ø–∫–∞
            poster_path = movie.get("poster_path", "")
            poster = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None
            inline_button = InlineKeyboardButton(
                text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"fav_{movie['id']}_{poster_path or 'no_image'}"
            )
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button]])

            if poster:
                await bot.send_photo(chat_id, poster, caption=text, parse_mode="Markdown", reply_markup=inline_keyboard)
            else:
                await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=inline_keyboard)

        await bot.send_message(chat_id, "–≠—Ç–æ —Ç–æ–ø-3 —Ñ–∏–ª—å–º–æ–≤! üî•", reply_markup=back_keyboard())

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
async def send_recommendations(bot, chat_id):
    async with ClientSession() as session:
        data = await fetch_recommendations(session)
        results = data.get("results")
        if not results:
            await bot.send_message(chat_id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî")
            return

        for movie in data["results"][:3]:
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            release = movie.get("release_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:4]
            desc = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            text = f"üé¨ *{title} ({release})*\n\n{desc}"

            poster_path = movie.get("poster_path", "")
            poster = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None
            inline_button = InlineKeyboardButton(
                text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"fav_{movie['id']}_{poster_path or 'no_image'}"
            )
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button]])

            if poster:
                await bot.send_photo(chat_id, poster, caption=text, parse_mode="Markdown", reply_markup=inline_keyboard)
            else:
                await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=inline_keyboard)

        await bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–∏ —Ñ–∏–ª—å–º—ã! üéØ", reply_markup=back_keyboard())

@router.callback_query(lambda call: call.data == "more_recommendations")
async def more_recommendations(call: types.CallbackQuery, bot: Bot):
    user_data[call.message.chat.id]["recommendations_page"] = user_data[call.message.chat.id].get(
        "recommendations_page", 1) + 1

    await send_recommendations(bot, call.message.chat.id)
    await call.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ ‚Äî –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É, —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
async def send_favorites(bot, chat_id):
    async with async_session() as session:
        user = await get_or_create_user_with_favorites(session, chat_id, "")
        favorites = await get_favorites(session, user)

    if not favorites:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ üòî")
        return

    for favorite in favorites:
        title = favorite.movie_title
        desc = favorite.movie_overview or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        poster = favorite.poster_url
        text = f"üé¨ *{title}*\n\n{desc}"

        # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"del_{favorite.movie_id}")]
        ])

        if poster:
            await bot.send_photo(chat_id, photo=poster, caption=text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=keyboard)

    await bot.send_message(chat_id, "–≠—Ç–æ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤! ‚≠ê", reply_markup=back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
async def show_favorites(message: types.Message):
    async with async_session() as session:
        user = await get_or_create_user_with_favorites(session, message.chat.id, message.from_user.username)
        favorites = await get_favorites(session, user)

    if not favorites:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ üòî", reply_markup=back_keyboard())
        return

    for favorite in favorites:
        title = favorite.movie_title
        desc = favorite.movie_overview or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        poster = favorite.poster_url
        text = f"*{title}*\n\n{desc}"
        logger.info(f"[show_favorites] Poster URL –¥–ª—è —Ñ–∏–ª—å–º–∞ {title}: {poster}")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"del_{favorite.movie_id}")
        ]])

        try:
            if poster:
                await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=poster,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            else:
                await message.bot.send_message(
                    chat_id=message.chat.id,
                    text=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞ {title}: {str(e)}")

    await message.answer("–≠—Ç–æ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤! ‚≠ê", reply_markup=back_keyboard())

@router.callback_query(lambda c: c.data.startswith("fav_"))
async def add_to_favorites(call: types.CallbackQuery):
    parts = call.data.split("_", 2)
    movie_id = int(parts[1])
    poster_path = parts[2] if len(parts) > 2 and parts[2] != 'no_image' else None

    chat_id = call.message.chat.id
    username = call.from_user.username

    message = call.message
    text = message.caption or message.text
    title = text.split("\n")[0].replace("üé¨ *", "").replace("*", "")
    overview = "\n".join(text.split("\n")[1:]).strip()

    poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None
    logger.info(f"[add_to_favorites] Poster URL –¥–ª—è —Ñ–∏–ª—å–º–∞ {title}: {poster_url}")

    async with async_session() as session:
        user = await get_or_create_user_with_favorites(session, chat_id, username)
        movie_data = {
            "id": movie_id,
            "title": title,
            "overview": overview,
            "poster": poster_url
        }

        favorites = await get_favorites(session, user)

        if any(f.movie_id == movie_id for f in favorites):
            await call.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∏–ª—å–º —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        elif len(favorites) >= 10:
            await call.message.answer("‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10 –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")
        else:
            success = await add_favorite(session, user, movie_data)
            if success:
                await call.message.answer("‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê")
            else:
                await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    await call.answer()

@router.message(Command("notifications"))
async def show_notifications_setting(message: Message):
    async with async_session() as session:
        user = await get_user_by_id(session, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        status_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã." if user.receive_notifications else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        kb = notification_keyboard(user.receive_notifications)

        await message.answer(f"{status_text}\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb)

@router.callback_query(F.data == "toggle_notifications")
async def handle_toggle_notifications_callback(callback: CallbackQuery):
    async with async_session() as session:
        result = await session.execute(
            select(User).filter_by(telegram_id=callback.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        user.receive_notifications = not user.receive_notifications
        await session.commit()

        text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã." if user.receive_notifications else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        new_kb = notification_keyboard(user.receive_notifications)

        await callback.message.edit_reply_markup(reply_markup=new_kb)
        await callback.answer(text)